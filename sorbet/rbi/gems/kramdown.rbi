# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/kramdown/all/kramdown.rbi
#
# kramdown-2.1.0
module Kramdown
  def self.data_dir; end
end
class Kramdown::Element
  def attr; end
  def children; end
  def children=(arg0); end
  def initialize(type, value = nil, attr = nil, options = nil); end
  def inspect; end
  def options; end
  def self.category(el); end
  def type; end
  def type=(arg0); end
  def value; end
  def value=(arg0); end
end
class Kramdown::Error < RuntimeError
end
module Kramdown::Parser
end
module Kramdown::Utils
  def self.camelize(name); end
  def self.deep_const_get(str); end
  def self.snake_case(name); end
end
module Kramdown::Utils::Configurable
  def configurable(name); end
end
module Kramdown::Converter
  def self.add_math_engine(data, *args, &block); end
  def self.add_syntax_highlighter(data, *args, &block); end
  def self.configurables; end
  def self.math_engine(data); end
  def self.syntax_highlighter(data); end
  extend Kramdown::Utils::Configurable
end
module Kramdown::Options
  def self.defaults; end
  def self.define(name, type, default, desc, &block); end
  def self.defined?(name); end
  def self.definitions; end
  def self.merge(hash); end
  def self.parse(name, data); end
  def self.simple_array_validator(val, name, size = nil); end
  def self.simple_hash_validator(val, name); end
  def self.str_to_sym(data); end
end
class Kramdown::Options::Boolean
  def self.===(other); end
end
class Kramdown::Options::Definition < Struct
  def default; end
  def default=(_); end
  def desc; end
  def desc=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
  def validator; end
  def validator=(_); end
end
class Kramdown::Document
  def initialize(source, options = nil); end
  def inspect; end
  def method_missing(id, *attr, &block); end
  def options; end
  def root; end
  def root=(arg0); end
  def try_require(type, name); end
  def warnings; end
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-rails/all/rspec-rails.rbi
#
# rspec-rails-3.8.2
module RSpec
  def self.feature(*args, &example_group_block); end
end
module RSpec::Rails
  def self.add_test_type_configurations(config); end
  def self.disable_testunit_autorun; end
  def self.initialize_configuration(config); end
end
module RSpec::Rails::FeatureCheck
  def can_check_pending_migrations?; end
  def can_maintain_test_schema?; end
  def has_1_9_hash_syntax?; end
  def has_action_mailer?; end
  def has_action_mailer_preview?; end
  def has_action_mailer_show_preview?; end
  def has_active_job?; end
  def has_active_record?; end
  def has_active_record_migration?; end
  def has_file_fixture?; end
  def self.can_check_pending_migrations?; end
  def self.can_maintain_test_schema?; end
  def self.has_1_9_hash_syntax?; end
  def self.has_action_mailer?; end
  def self.has_action_mailer_preview?; end
  def self.has_action_mailer_show_preview?; end
  def self.has_active_job?; end
  def self.has_active_record?; end
  def self.has_active_record_migration?; end
  def self.has_file_fixture?; end
  def self.type_metatag(type); end
  def type_metatag(type); end
end
class RSpec::Rails::Railtie < Rails::Railtie
  def config_default_preview_path(options); end
  def config_preview_path?(options); end
  def setup_preview_path(app); end
  def supports_action_mailer_previews?(config); end
end
class RSpec::Rails::AssertionDelegator < Module
  def initialize(*assertion_modules); end
end
module RSpec::Rails::MinitestLifecycleAdapter
  def after_setup; end
  def after_teardown; end
  def before_setup; end
  def before_teardown; end
  extend ActiveSupport::Concern
end
module RSpec::Rails::MinitestCounters
  def assertions; end
  def assertions=(arg0); end
end
module RSpec::Rails::SetupAndTeardownAdapter
  def initialize(*args); end
  def method_name; end
  extend ActiveSupport::Concern
end
module RSpec::Rails::SetupAndTeardownAdapter::ClassMethods
  def setup(*methods, &block); end
  def teardown(*methods, &block); end
end
module RSpec::Rails::MinitestAssertionAdapter
  def assertion_delegator; end
  extend ActiveSupport::Concern
end
module RSpec::Rails::MinitestAssertionAdapter::ClassMethods
  def assertion_method_names; end
  def define_assertion_delegators; end
  def test_unit_specific_methods; end
end
class RSpec::Rails::MinitestAssertionAdapter::AssertionDelegator
  include Minitest::Assertions
  include RSpec::Rails::MinitestCounters
end
module RSpec::Rails::ViewRendering
  def controller; end
  def controller=(arg0); end
  def render_views?; end
  extend ActiveSupport::Concern
end
module RSpec::Rails::ViewRendering::ClassMethods
  def render_views(true_or_false = nil); end
  def render_views?; end
end
class RSpec::Rails::ViewRendering::EmptyTemplateResolver
  def self.build(path); end
  def self.nullify_template_rendering(templates); end
end
class RSpec::Rails::ViewRendering::EmptyTemplateResolver::ResolverDecorator
  def initialize(resolver); end
  def method_missing(name, *args, &block); end
  def nullify_templates(collection); end
end
class RSpec::Rails::ViewRendering::EmptyTemplateResolver::FileSystemResolver < ActionView::FileSystemResolver
  def find_templates(*args); end
end
class RSpec::Rails::ViewRendering::EmptyTemplateHandler
  def self.call(_template); end
end
module RSpec::Rails::ViewRendering::EmptyTemplates
  def _path_decorator(*paths); end
  def append_view_path(new_path); end
  def prepend_view_path(new_path); end
end
module RSpec::Rails::Matchers
  def be_a_new(model_class); end
  def be_new_record; end
  def be_valid(*args); end
  def have_http_status(target); end
end
module RSpec::Rails::Matchers::RenderTemplate
  def have_rendered(options, message = nil); end
  def render_template(options, message = nil); end
end
class RSpec::Rails::Matchers::RenderTemplate::RenderTemplateMatcher < RSpec::Matchers::BuiltIn::BaseMatcher
  def check_redirect; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(scope, expected, message = nil); end
  def matches?(*arg0); end
end
module RSpec::Rails::Matchers::RedirectTo
  def redirect_to(target); end
end
class RSpec::Rails::Matchers::RedirectTo::RedirectTo < RSpec::Matchers::BuiltIn::BaseMatcher
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(scope, expected); end
  def matches?(_); end
end
module RSpec::Rails::Matchers::RoutingMatchers
  def be_routable; end
  def route_to(*expected); end
  extend RSpec::Matchers::DSL
end
class RSpec::Rails::Matchers::RoutingMatchers::RouteToMatcher < RSpec::Matchers::BuiltIn::BaseMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(scope, *expected); end
  def matches?(verb_to_path_map); end
end
class RSpec::Rails::Matchers::RoutingMatchers::BeRoutableMatcher < RSpec::Matchers::BuiltIn::BaseMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(scope); end
  def matches?(path); end
end
module RSpec::Rails::Matchers::RoutingMatchers::RouteHelpers
  def delete(path); end
  def get(path); end
  def head(path); end
  def options(path); end
  def patch(path); end
  def post(path); end
  def put(path); end
end
class RSpec::Rails::Matchers::BeANewRecord < RSpec::Matchers::BuiltIn::BaseMatcher
  def failure_message; end
  def failure_message_when_negated; end
  def matches?(actual); end
end
class RSpec::Rails::Matchers::BeANew < RSpec::Matchers::BuiltIn::BaseMatcher
  def attributes; end
  def attributes_match?(actual); end
  def failure_message; end
  def initialize(expected); end
  def matches?(actual); end
  def unmatched_attributes; end
  def with(expected_attributes); end
end
class RSpec::Rails::Matchers::BeValid < RSpec::Matchers::BuiltIn::Be
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(*args); end
  def matches?(actual); end
end
module RSpec::Rails::Matchers::HaveHttpStatus
  def as_test_response(obj); end
  def invalid_response_type_message; end
  def self.as_test_response(obj); end
  def self.matcher_for_status(target); end
end
class RSpec::Rails::Matchers::HaveHttpStatus::NumericCode < RSpec::Matchers::BuiltIn::BaseMatcher
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(code); end
  def matches?(response); end
  include RSpec::Rails::Matchers::HaveHttpStatus
end
class RSpec::Rails::Matchers::HaveHttpStatus::SymbolicStatus < RSpec::Matchers::BuiltIn::BaseMatcher
  def actual_status; end
  def compute_status_from(code); end
  def description; end
  def expected_status; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(status); end
  def matches?(response); end
  def pp_actual; end
  def pp_expected; end
  def pp_status(status, code); end
  def set_expected_code!; end
  include RSpec::Rails::Matchers::HaveHttpStatus
end
class RSpec::Rails::Matchers::HaveHttpStatus::GenericStatus < RSpec::Matchers::BuiltIn::BaseMatcher
  def check_expected_status(test_response, expected); end
  def description; end
  def failure_message; end
  def failure_message_when_negated; end
  def initialize(type); end
  def matches?(response); end
  def self.valid_statuses; end
  def type_codes; end
  def type_message; end
  include RSpec::Rails::Matchers::HaveHttpStatus
end
module RSpec::Rails::FixtureSupport
end
module RSpec::Rails::FileFixtureSupport
  extend ActiveSupport::Concern
  include ActiveSupport::Testing::FileFixtures
end
module RSpec::Rails::FixtureFileUploadSupport
  def fixture_file_upload(*args, &block); end
  def rails_fixture_file_wrapper; end
end
class RSpec::Rails::FixtureFileUploadSupport::RailsFixtureFileWrapper
  def self.fixture_path; end
  def self.fixture_path=(value); end
  def self.instance; end
  include ActionDispatch::TestProcess
end
module RSpec::Rails::RailsExampleGroup
  extend ActiveSupport::Concern
  include RSpec::Rails::FixtureSupport
  include RSpec::Rails::MinitestAssertionAdapter
  include RSpec::Rails::MinitestLifecycleAdapter
  include RSpec::Rails::SetupAndTeardownAdapter
end
module RSpec::Rails::ControllerAssertionDelegator
  def assert_generates(*args, &block); end
  def assert_recognizes(*args, &block); end
  def assert_routing(*args, &block); end
  def assertion_instance; end
  def build_assertion_instance; end
  def with_routing(*args, &block); end
end
module RSpec::Rails::ControllerExampleGroup
  def bypass_rescue; end
  def controller; end
  def method_missing(method, *args, &block); end
  def route_available?(method); end
  def route_defined?(routes, method); end
  def routes; end
  def routes=(routes); end
  extend ActiveSupport::Concern
  include ActionController::TestCase::Behavior
  include RSpec::Rails::ControllerAssertionDelegator
  include RSpec::Rails::Matchers::RedirectTo
  include RSpec::Rails::Matchers::RenderTemplate
  include RSpec::Rails::Matchers::RoutingMatchers
  include RSpec::Rails::RailsExampleGroup
  include RSpec::Rails::ViewRendering
end
module RSpec::Rails::ControllerExampleGroup::ClassMethods
  def controller(base_class = nil, &body); end
  def controller_class; end
  def routes; end
end
module RSpec::Rails::ControllerExampleGroup::BypassRescue
  def rescue_with_handler(exception); end
end
module RSpec::Rails::RequestExampleGroup
  def app; end
  extend ActiveSupport::Concern
  include ActionController::TemplateAssertions
  include ActionDispatch::Assertions
  include ActionDispatch::Integration::Runner
  include ActionDispatch::IntegrationTest::Behavior
  include RSpec::Rails::Matchers::RedirectTo
  include RSpec::Rails::Matchers::RenderTemplate
  include RSpec::Rails::RailsExampleGroup
end
module RSpec::Rails::ViewAssigns
  def _assigns; end
  def _encapsulated_assigns; end
  def assign(key, value); end
  def view_assigns; end
end
module RSpec::Rails::HelperExampleGroup
  def _controller_path(example); end
  def helper; end
  extend ActiveSupport::Concern
  include ActionView::TestCase::Behavior
  include RSpec::Rails::RailsExampleGroup
  include RSpec::Rails::ViewAssigns
end
module RSpec::Rails::HelperExampleGroup::ClassMethods
  def determine_constant_from_test_name(_ignore); end
end
module RSpec::Rails::ViewSpecMethods
  def add_to(klass); end
  def remove_from(klass); end
  def self.add_to(klass); end
  def self.remove_from(klass); end
end
class RSpec::Rails::ViewPathBuilder
  def initialize(route_set); end
  def path_for(path_params); end
end
module RSpec::Rails::ViewExampleGroup
  extend ActiveSupport::Concern
  include ActionView::TestCase::Behavior
  include RSpec::Rails::Matchers::RenderTemplate
  include RSpec::Rails::RailsExampleGroup
  include RSpec::Rails::ViewAssigns
end
module RSpec::Rails::ViewExampleGroup::StubResolverCache
  def self.resolver_for(hash); end
end
module RSpec::Rails::ViewExampleGroup::ClassMethods
  def _default_helper; end
  def _default_helpers; end
end
module RSpec::Rails::ViewExampleGroup::ExampleMethods
  def _controller_path; end
  def _default_render_options; end
  def _include_controller_helpers; end
  def _inferred_action; end
  def _path_parts; end
  def params; end
  def render(options = nil, local_assigns = nil, &block); end
  def response; end
  def stub_template(hash); end
  def template; end
  def view; end
  extend ActiveSupport::Concern
end
module RSpec::Rails::MailerExampleGroup
end
module RSpec::Rails::RoutingAssertionDelegator
  def assert_generates(*args, &block); end
  def assert_recognizes(*args, &block); end
  def assert_routing(*args, &block); end
  def assertion_instance; end
  def build_assertion_instance; end
  def with_routing(*args, &block); end
end
module RSpec::Rails::RoutingExampleGroup
  def method_missing(m, *args, &block); end
  def routes; end
  def routes=(routes); end
  extend ActiveSupport::Concern
  include RSpec::Rails::Matchers::RoutingMatchers
  include RSpec::Rails::Matchers::RoutingMatchers::RouteHelpers
  include RSpec::Rails::RailsExampleGroup
  include RSpec::Rails::RoutingAssertionDelegator
end
module RSpec::Rails::RoutingExampleGroup::ClassMethods
  def routes; end
end
module RSpec::Rails::ModelExampleGroup
  extend ActiveSupport::Concern
  include RSpec::Rails::RailsExampleGroup
end
module RSpec::Rails::JobExampleGroup
end
module RSpec::Rails::FeatureExampleGroup
  def visit(*arg0); end
  extend ActiveSupport::Concern
  include RSpec::Rails::RailsExampleGroup
end
class RSpec::Core::ExampleGroup
  def self.feature(*args, &example_group_block); end
  def self.scenario(*all_args, &block); end
  def self.xscenario(*all_args, &block); end
end
class Module
  def feature(*a, &b); end
end
module RSpec::Rails::SystemExampleGroup
  def app; end
  def method_name; end
  def passed?; end
  extend ActiveSupport::Concern
  include ActionController::TemplateAssertions
  include ActionDispatch::Assertions
  include ActionDispatch::Integration::Runner
  include RSpec::Rails::Matchers::RedirectTo
  include RSpec::Rails::Matchers::RenderTemplate
  include RSpec::Rails::RailsExampleGroup
end
module RSpec::Rails::SystemExampleGroup::BlowAwayAfterTeardownHook
  def after_teardown; end
end
class RSpec::Rails::Configuration
end
module RSpec::Core::Configuration::Readers
  def file_fixture_path; end
  def fixture_path; end
  def global_fixtures; end
  def infer_base_class_for_anonymous_controllers; end
  def rendering_views; end
  def use_instantiated_fixtures; end
  def use_transactional_fixtures; end
end
class RSpec::Rails::ActiveRecordConfiguration
  def self.initialize_activerecord_configuration(config); end
end

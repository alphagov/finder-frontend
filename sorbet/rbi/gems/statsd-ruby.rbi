# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/statsd-ruby/all/statsd-ruby.rbi
#
# statsd-ruby-1.4.0
class Statsd
  def batch(&block); end
  def batch_byte_size; end
  def batch_byte_size=(arg0); end
  def batch_size; end
  def batch_size=(arg0); end
  def connect; end
  def count(stat, count, sample_rate = nil); end
  def decrement(stat, sample_rate = nil); end
  def delimiter; end
  def delimiter=(delimiter); end
  def gauge(stat, value, sample_rate = nil); end
  def host; end
  def host=(host); end
  def increment(stat, sample_rate = nil); end
  def initialize(host = nil, port = nil, protocol = nil); end
  def namespace; end
  def namespace=(namespace); end
  def port; end
  def port=(port); end
  def postfix; end
  def postfix=(pf); end
  def prefix; end
  def self.logger; end
  def self.logger=(arg0); end
  def send_stats(stat, delta, type, sample_rate = nil); end
  def send_to_socket(message); end
  def set(stat, value, sample_rate = nil); end
  def socket; end
  def time(stat, sample_rate = nil); end
  def timing(stat, ms, sample_rate = nil); end
end
class Statsd::Batch < Statsd
  def batch_byte_size; end
  def batch_byte_size=(arg0); end
  def batch_size; end
  def batch_size=(arg0); end
  def delimiter(*args, &block); end
  def delimiter=(*args, &block); end
  def easy; end
  def flush; end
  def host(*args, &block); end
  def host=(*args, &block); end
  def initialize(statsd); end
  def namespace(*args, &block); end
  def namespace=(*args, &block); end
  def port(*args, &block); end
  def port=(*args, &block); end
  def postfix(*args, &block); end
  def prefix(*args, &block); end
  def send_to_socket(message); end
  extend Forwardable
end
class Statsd::Admin
  def connect; end
  def counters; end
  def delcounters(item); end
  def delete_metric(name, item); end
  def delgauges(item); end
  def deltimers(item); end
  def gauges; end
  def host; end
  def host=(host); end
  def initialize(host = nil, port = nil); end
  def port; end
  def port=(port); end
  def read_from_socket; end
  def read_metric(name); end
  def self.logger; end
  def self.logger=(arg0); end
  def send_to_socket(message); end
  def stats; end
  def timers; end
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/govuk_ab_testing/all/govuk_ab_testing.rbi
#
# govuk_ab_testing-2.4.1
module GovukAbTesting
  def self.configuration; end
  def self.configure; end
end
class GovukAbTesting::Configuration
  def acceptance_test_framework; end
  def acceptance_test_framework=(framework); end
  def config; end
  def config=(arg0); end
  def framework_class; end
  def initialize; end
end
class GovukAbTesting::RequestedVariant
  def ab_test; end
  def analytics_meta_tag; end
  def configure_response(response); end
  def initialize(ab_test, request_headers, dimension); end
  def request_headers; end
  def variant?(name); end
  def variant_a?; end
  def variant_b?; end
  def variant_name; end
end
class GovukAbTesting::AbTest
  def ab_test_name; end
  def allowed_variants; end
  def control_variant; end
  def dimension; end
  def initialize(ab_test_name, dimension:, allowed_variants: nil, control_variant: nil); end
  def meta_tag_name; end
  def name; end
  def request_header; end
  def requested_variant(request_headers); end
  def response_header; end
end
module GovukAbTesting::MinitestAssertions
  def assert_contains_substring(string:, substring:, error_message:); end
  def assert_does_not_contain_substring(string:, substring:, error_message:); end
  def assert_has_size(enumerable:, size:, error_message:); end
  def assert_is_empty(enumerable:, error_message:); end
  def assert_is_equal(expected:, actual:, error_message:); end
  def assert_not_blank(string:, error_message:); end
end
module GovukAbTesting::RspecAssertions
  def assert_contains_substring(string:, substring:, error_message:); end
  def assert_does_not_contain_substring(string:, substring:, error_message:); end
  def assert_has_size(enumerable:, size:, error_message:); end
  def assert_is_empty(enumerable:, error_message:); end
  def assert_is_equal(expected:, actual:, error_message:); end
  def assert_not_blank(string:, error_message:); end
end
module GovukAbTesting::AbstractHelpers
  def acceptance_test_framework; end
  def assert_page_not_tracked_in_ab_test(ab_test_name); end
  def assert_page_tracked_in_ab_test(ab_test_name, variant, dimension); end
  def assert_response_is_cached_by_variant(ab_test_name); end
  def assert_response_not_modified_for_ab_test(ab_test_name); end
  def setup_ab_variant(ab_test_name, variant, dimension = nil); end
  def with_variant(args); end
end
module GovukAbTesting::MinitestHelpers
  include GovukAbTesting::AbstractHelpers
  include GovukAbTesting::MinitestAssertions
end
module GovukAbTesting::RspecHelpers
  include GovukAbTesting::AbstractHelpers
  include GovukAbTesting::RspecAssertions
end
module GovukAbTesting::AcceptanceTests
end
class GovukAbTesting::AcceptanceTests::MetaTag
  def content; end
  def dimension; end
  def for_ab_test?(ab_test_name); end
  def initialize(content:, dimension:); end
end
class GovukAbTesting::AcceptanceTests::Capybara
  def analytics_meta_tags; end
  def analytics_meta_tags_for_test(ab_test_name); end
  def capybara_page; end
  def initialize(scope); end
  def request; end
  def request_headers; end
  def set_header(name, value); end
  def vary_header(*arg0); end
end
class GovukAbTesting::AcceptanceTests::ActiveSupport
  def analytics_meta_tags; end
  def analytics_meta_tags_for_test(ab_test_name); end
  def initialize(scope); end
  def request; end
  def request_headers; end
  def response; end
  def scope; end
  def set_header(name, value); end
  def vary_header; end
end
